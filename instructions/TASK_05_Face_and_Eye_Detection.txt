# TASK_05_Face_and_Eye_Detection.txt

# Task Title
Implement Face and Eye Detection with OpenCV via JavaCV

---

# Goal
Integrate basic face and eye detection into the system:
- Detect if the driver's face is present and facing forward.
- Detect eye closure to determine drowsiness.
- Trigger appropriate state changes (Normal, Distracted, Drowsy).

---

# Why This Task Is Important
- Core functionality: monitoring the driver relies on detecting eyes and face orientation.
- Detecting fatigue and distraction is the primary function of the entire system.

---

# Prerequisites
Before starting this task:
- Complete `TASK_04_Create_Dispatcher_Screen.txt`.
- Review `CODING_STANDARDS.txt`.
- Study `Knowledge/face_detection_knowledge.txt` carefully.

---

# Detailed Instructions

## Step 1: Create FaceDetectionService
- Package: `com.driver_monitoring.service`
- File: `FaceDetectionService.java`

```java
// What is this file?
// This service handles detection of the driver's face, eyes, and calculates indicators of distraction and drowsiness.
// Why is this needed?
// It processes video frames and provides driver status (Normal, Distracted, Drowsy) for monitoring and event logging.

package com.driver_monitoring.service;

import org.bytedeco.opencv.opencv_core.RectVector;
import org.bytedeco.opencv.opencv_core.Mat;

public interface FaceDetectionService {

    /**
     * Process a video frame and determine driver state.
     * @param frame Video frame captured from camera
     * @return DriverState (NORMAL, DISTRACTED, DROWSY)
     */
    DriverState analyzeFrame(Mat frame);
}
```

## Step 2: Create DriverState Enum
- Package: `com.driver_monitoring.model`
- File: `DriverState.java`

```java
// What is this file?
// Enumeration of possible driver states.
// Why is this needed?
// It simplifies and standardizes how we describe the driver's current condition.

package com.driver_monitoring.model;

public enum DriverState {
    NORMAL,
    DISTRACTED,
    DROWSY
}
```

## Step 3: Implement FaceDetectionServiceImpl
- File: `FaceDetectionServiceImpl.java`
- Use OpenCV Haar Cascades for face and eye detection.
- Analyze frames approximately once every second.

### Algorithm:
- If no face is detected → Distracted.
- If face is detected but eyes are closed for more than 2 seconds → Drowsy.
- Else → Normal.

**Hint:** Check `Knowledge/face_detection_knowledge.txt` for EAR (Eye Aspect Ratio) calculations.

---

# Important Details
- Set the camera frame size to 640x480.
- Limit detection processing to once every 1 second to reduce CPU load.
- Use built-in OpenCV models for initial prototype (no custom ML models).
- If a frame fails to detect face/eyes, handle gracefully (no crashes).

---

# Coding Standards
You must follow all rules defined in `CODING_STANDARDS.txt`:
- Clear comments at class and method level.
- Logical and small methods.
- Simple handling of OpenCV resources (release objects after use).

---

# Success Criteria
- Faces are detected reliably on camera input.
- Drowsiness (eyes closed) and distraction (face turned) are correctly classified.
- System updates the UI notifications accordingly.
- Code is simple, clean, and properly commented.

---

# References
- [OpenCV Haar Cascades](https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html)
- [JavaCV Documentation](https://github.com/bytedeco/javacv)
- Knowledge about face and eye detection ➔ `Knowledge/face_detection_knowledge.txt`

---

# End of TASK_05_Face_and_Eye_Detection.txt

