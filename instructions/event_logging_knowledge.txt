# Knowledge: event_logging_knowledge.txt

# Purpose
This knowledge file explains how to properly log driver events into the database for the Driver Monitoring System.
It provides clear rules and examples to ensure consistent, correct event storage.

---

# Technologies Used
- Spring Data JPA
- H2 Database (for prototype)
- Entity classes: Driver and Event

---

# Event Logging Strategy

## 1. What to Log
Only **critical events** should be logged:
- **Distracted** events (when the driver looks away from the road).
- **Drowsy** events (when the driver closes eyes for too long).

**Important:**
- **Do NOT** log "Normal" states.
- Only create a new event entry if an actual problem is detected.

## 2. What Data to Store for Each Event
- **Driver ID**: 6-digit string identifying the driver.
- **Timestamp**: When the event was detected.
- **Event Type**: Either "Drowsy" or "Distracted".
- **Event Duration**: How long the problem persisted (in seconds).

Example:
| Driver ID | Timestamp             | Event Type | Duration (s) |
|-----------|-----------------------|------------|--------------|
| 123456    | 2025-04-28T10:15:42    | Drowsy     | 3.2          |
| 654321    | 2025-04-28T11:07:13    | Distracted | 1.0          |

## 3. Duration Rules
- If a condition (drowsy/distracted) lasts for multiple checks (e.g., multiple seconds), accumulate the duration before logging.
- Otherwise, use **1 second** as the default event duration for quick detections.

---

# Example: Logging an Event

In Java code:
```java
Event event = new Event(
    driverId,
    LocalDateTime.now(),
    DriverState.DROWSY.name(),
    2.5f // seconds
);
eventRepository.save(event);
```

---

# Best Practices
- Always check that `driverId` is not null or empty before saving.
- Always log current `LocalDateTime.now()` for the event timestamp.
- Always use `.name()` of the `DriverState` enum for event type.
- Avoid redundant or duplicate logging for the same continuous state (use smart detection if possible).

---

# Data Model Summary

## Driver Entity
| Field       | Type   |
|-------------|--------|
| driverId    | String |
| driverName  | String |

## Event Entity
| Field          | Type         |
|----------------|--------------|
| eventId        | Long (auto)  |
| driverId       | String (FK)  |
| timestamp      | LocalDateTime|
| eventType      | String       |
| eventDuration  | Float        |

---

# File Storage and Organization
- All events are stored in the `events` table.
- Events are linked to drivers via `driverId` (no complex relations needed for MVP).

---

# Important Notes
- Logging should be **fast and asynchronous** in future versions. For now, direct save is acceptable.
- Keep event types as simple Strings for easier querying.
- Use clear and explicit naming everywhere.

---

# Summary
- Only log "Distracted" and "Drowsy".
- Attach Driver ID, timestamp, event type, and duration.
- No duplicate "Normal" logs.
- Simple and clean structure.

Follow this strategy exactly to ensure proper operation and reporting.

---

# End of event_logging_knowledge.txt

