# TASK_06_Event_Logging_Service.txt

# Task Title
Create Event Logging Service: Save Driver Events to Database

---

# Goal
Develop a service that:
- Logs critical events (Distraction or Drowsiness) for drivers.
- Saves event data (timestamp, type, duration) into the database.
- Associates each event with the correct driver.

---

# Why This Task Is Important
- Recorded events are critical for the Dispatcher Panel and analytics.
- Event logging must be reliable, simple, and fast to avoid performance issues.

---

# Prerequisites
Before starting this task:
- Complete `TASK_05_Face_and_Eye_Detection.txt`.
- Review `CODING_STANDARDS.txt`.
- Review `Knowledge/event_logging_knowledge.txt`.

---

# Detailed Instructions

## Step 1: Create EventLoggingService Interface
- Package: `com.driver_monitoring.service`
- File: `EventLoggingService.java`

```java
// What is this file?
// This service provides functionality to log important driver events into the database.
// Why is this needed?
// To capture and persist distraction and drowsiness incidents for further analysis.

package com.driver_monitoring.service;

import com.driver_monitoring.model.DriverState;

public interface EventLoggingService {

    /**
     * Logs an event for a driver.
     * @param driverId The ID of the driver.
     * @param driverState The type of event (DROWSY or DISTRACTED).
     * @param duration The duration of the event in seconds.
     */
    void logEvent(String driverId, DriverState driverState, float duration);
}
```

## Step 2: Create EventLoggingServiceImpl
- Package: `com.driver_monitoring.service`
- File: `EventLoggingServiceImpl.java`

### Implementation Details
- Inject `EventRepository`.
- Create and save an `Event` object when called.
- Only log if `driverState` is **DROWSY** or **DISTRACTED**.
- Do **not** log NORMAL states.
- Save current time as event timestamp.

```java
// What is this file?
// Implements the logic for saving driver events to the database.
// Why is this needed?
// It provides a clean, reusable way to store monitoring data.

package com.driver_monitoring.service;

import com.driver_monitoring.model.Event;
import com.driver_monitoring.model.DriverState;
import com.driver_monitoring.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class EventLoggingServiceImpl implements EventLoggingService {

    @Autowired
    private EventRepository eventRepository;

    @Override
    public void logEvent(String driverId, DriverState driverState, float duration) {
        if (driverState == DriverState.NORMAL) {
            return; // We do not log NORMAL states
        }

        Event event = new Event(driverId, LocalDateTime.now(), driverState.name(), duration);
        eventRepository.save(event);
    }
}
```

---

# Important Details
- Event duration should be passed in seconds (e.g., 2.5 seconds).
- Do not block main thread unnecessarily during logging.
- Ensure driver ID is always attached correctly to the event.

---

# Coding Standards
You must follow all rules defined in `CODING_STANDARDS.txt`:
- Clear method responsibilities.
- Proper comments at class and method level.
- Minimal and logical code flow.

---

# Success Criteria
- Events are created only for Distracted or Drowsy states.
- Events are properly saved into the database.
- Application runs without any exceptions during logging.
- Code is simple, clean, and properly commented.

---

# References
- [Spring Data JPA Repositories](https://spring.io/guides/gs/accessing-data-jpa/)
- Knowledge about event structure âž” `Knowledge/event_logging_knowledge.txt`

---

# End of TASK_06_Event_Logging_Service.txt

