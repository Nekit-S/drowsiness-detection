# TASK_04_Create_Dispatcher_Screen.txt

# Task Title
Create Dispatcher Screen: View Drivers, Statistics, and Event Logs

---

# Goal
Develop a simple web-based Dispatcher Panel:
- List all available drivers.
- Allow selecting a driver to view their statistics.
- Show a graph of distraction and drowsiness events over time.
- Show a table of detailed event logs.

---

# Why This Task Is Important
- Dispatchers need a centralized place to monitor the behavior of drivers.
- Provides actionable insights based on collected event data.
- Demonstrates the practical value of the monitoring system.

---

# Prerequisites
Before starting this task:
- Complete `TASK_03_Create_Driver_Screen.txt`.
- Review `CODING_STANDARDS.txt`.
- Review `Knowledge/event_logging_knowledge.txt`.

---

# Detailed Instructions

## Step 1: Create Dispatcher Main Page
- File: `src/main/resources/templates/dispatcher_panel.html`

Content:
- List of buttons, each representing a driver.
  - Display Driver Name and Driver ID.
- Clicking on a button loads that driver's detailed statistics.

## Step 2: Create Dispatcher Controller
- File: `src/main/java/com/driver_monitoring/controller/DispatcherController.java`

```java
// What is this file?
// This controller manages the Dispatcher panel: list drivers, select a driver, view stats and logs.
// Why is this needed?
// It connects the database (Driver, Event entities) with the Dispatcher front-end.

package com.driver_monitoring.controller;

import com.driver_monitoring.model.Driver;
import com.driver_monitoring.model.Event;
import com.driver_monitoring.repository.DriverRepository;
import com.driver_monitoring.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;

@Controller
public class DispatcherController {

    @Autowired
    private DriverRepository driverRepository;

    @Autowired
    private EventRepository eventRepository;

    @GetMapping("/dispatcher")
    public String dispatcherPanel(Model model) {
        List<Driver> drivers = driverRepository.findAll();
        model.addAttribute("drivers", drivers);
        return "dispatcher_panel";
    }

    @GetMapping("/dispatcher/driver/{driverId}")
    public String driverStats(@PathVariable String driverId, Model model) {
        Driver driver = driverRepository.findById(driverId).orElse(null);
        List<Event> events = eventRepository.findByDriverId(driverId);

        model.addAttribute("driver", driver);
        model.addAttribute("events", events);
        return "driver_statistics";
    }
}
```

## Step 3: Create Driver Statistics Page
- File: `src/main/resources/templates/driver_statistics.html`

Content:
- Show Driver Name and ID.
- Draw graph:
  - X-axis: Timestamp
  - Y-axis: Event Type (e.g., "1" for Distracted, "2" for Drowsy)
- Show event logs:
  - Timestamp
  - Event Type
  - Event Duration (seconds)

Use **Chart.js** for drawing the graph.
Use a simple **HTML table** for event logs.

**Reference:** Example snippets in `Knowledge/event_logging_knowledge.txt`

---

# Coding Standards
You must follow all rules defined in `CODING_STANDARDS.txt`:
- Simple, understandable controllers.
- Proper comments at the top of each file.
- Clear HTML layouts with Bootstrap classes.

---

# Success Criteria
- Dispatcher Panel lists all drivers correctly.
- Clicking on a driver shows statistics and events.
- Graph is correctly displayed.
- Event log table is correctly displayed.
- Code is simple, clean, and properly commented.

---

# References
- [Spring Boot MVC Basics](https://spring.io/guides/gs/serving-web-content/)
- [Chart.js Documentation](https://www.chartjs.org/docs/latest/)
- Knowledge about event structures âž” `Knowledge/event_logging_knowledge.txt`

---

# End of TASK_04_Create_Dispatcher_Screen.txt

