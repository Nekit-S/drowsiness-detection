# TASK_02_Create_Entities_and_Repositories.txt

# Task Title
Create Driver and Event Entities with JPA Repositories

---

# Goal
Design and implement two database entities (Driver and Event) and their corresponding repository interfaces.
These will store all necessary information about drivers and their fatigue/distraction events.

---

# Why This Task Is Important
- We need a persistent structure to log driver events.
- Later, the Dispatcher panel will read from these tables.
- This is the foundation for all logging and statistics in the project.

---

# Prerequisites
Before starting this task:
- Complete `TASK_01_Setup_Backend.txt`.
- Review `CODING_STANDARDS.txt`.

---

# Detailed Instructions

## Step 1: Create Driver Entity

- Package: `com.driver_monitoring.model`
- File: `Driver.java`

```java
// What is this file?
// This class represents a Driver entity stored in the database.
// Why is this needed?
// It stores the driver's ID and name, which are used to associate monitoring events.

package com.driver_monitoring.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "drivers")
public class Driver {

    @Id
    private String driverId; // Must be exactly 6 digits

    private String driverName;

    // Constructors
    public Driver() {}

    public Driver(String driverId, String driverName) {
        this.driverId = driverId;
        this.driverName = driverName;
    }

    // Getters and Setters
    public String getDriverId() {
        return driverId;
    }

    public void setDriverId(String driverId) {
        this.driverId = driverId;
    }

    public String getDriverName() {
        return driverName;
    }

    public void setDriverName(String driverName) {
        this.driverName = driverName;
    }
}
```

## Step 2: Create Event Entity

- Package: `com.driver_monitoring.model`
- File: `Event.java`

```java
// What is this file?
// This class represents an Event (either distraction or drowsiness) logged for a driver.
// Why is this needed?
// It captures when and why a warning event occurred during driver monitoring.

package com.driver_monitoring.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "events")
public class Event {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long eventId;

    private String driverId; // FK to Driver (no full relation yet for simplicity)

    private LocalDateTime timestamp;

    private String eventType; // "Distracted" or "Drowsy"

    private float eventDuration; // Duration in seconds

    // Constructors
    public Event() {}

    public Event(String driverId, LocalDateTime timestamp, String eventType, float eventDuration) {
        this.driverId = driverId;
        this.timestamp = timestamp;
        this.eventType = eventType;
        this.eventDuration = eventDuration;
    }

    // Getters and Setters
    public Long getEventId() {
        return eventId;
    }

    public String getDriverId() {
        return driverId;
    }

    public void setDriverId(String driverId) {
        this.driverId = driverId;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    public String getEventType() {
        return eventType;
    }

    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    public float getEventDuration() {
        return eventDuration;
    }

    public void setEventDuration(float eventDuration) {
        this.eventDuration = eventDuration;
    }
}
```

## Step 3: Create Repositories

- Package: `com.driver_monitoring.repository`

Create two interfaces:

**DriverRepository.java**
```java
// What is this file?
// Repository interface for accessing Driver data from the database.
// Why is this needed?
// It allows easy CRUD operations on Driver entities without boilerplate code.

package com.driver_monitoring.repository;

import com.driver_monitoring.model.Driver;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DriverRepository extends JpaRepository<Driver, String> {
}
```

**EventRepository.java**
```java
// What is this file?
// Repository interface for accessing Event data from the database.
// Why is this needed?
// It allows easy CRUD operations on Event entities and searching by driver ID.

package com.driver_monitoring.repository;

import com.driver_monitoring.model.Event;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface EventRepository extends JpaRepository<Event, Long> {
    List<Event> findByDriverId(String driverId);
}
```

---

# Coding Standards
You must follow all rules defined in `CODING_STANDARDS.txt`:
- Clear simple code
- Proper comments at the top of each class/file
- Logical structuring of fields and methods

---

# Success Criteria
- Entities are correctly mapped to tables `drivers` and `events`.
- Repositories compile without errors.
- Application starts normally after adding entities.
- Classes are properly commented according to standards.

---

# References
- [Spring Data JPA Basics](https://spring.io/projects/spring-data-jpa)
- Knowledge about event structures âž” `Knowledge/event_logging_knowledge.txt`

---

# End of TASK_02_Create_Entities_and_Repositories.txt

