# TASK_08_Unit_Tests.txt

# Task Title
Create Unit Tests for Critical Components

---

# Goal
Implement simple and reliable unit tests for the most important services:
- FaceDetectionService
- EventLoggingService

Unit tests help catch bugs early and validate core logic automatically.

---

# Why This Task Is Important
- Increases reliability of the system.
- Helps prevent future regressions.
- Necessary for any production-quality backend.

---

# Prerequisites
Before starting this task:
- Complete `TASK_07_Notification_System.txt`.
- Review `CODING_STANDARDS.txt`.
- Understand basic JUnit 5 usage.

---

# Detailed Instructions

## Step 1: Setup Test Structure
- Tests must be placed under:

```bash
src/test/java/com/driver_monitoring/
```

- Use package structures matching the main code (e.g., `service`, `model`).

## Step 2: Create FaceDetectionServiceTest
- File: `src/test/java/com/driver_monitoring/service/FaceDetectionServiceTest.java`

- Write simple unit tests to:
  - Verify that the service can classify frames correctly (mock frames if needed).
  - Simulate Normal, Distracted, Drowsy conditions.
  - Use dummy `Mat` frames — we do **not** require real camera input for unit tests.

- Example skeleton:
```java
// What is this file?
// Unit tests for FaceDetectionService.
// Why is this needed?
// To ensure face and eye detection logic works correctly under simulated conditions.

package com.driver_monitoring.service;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

class FaceDetectionServiceTest {

    @Test
    void testNormalDetection() {
        // Mock frame and verify Normal result
    }

    @Test
    void testDistractedDetection() {
        // Mock frame and verify Distracted result
    }

    @Test
    void testDrowsyDetection() {
        // Mock frame and verify Drowsy result
    }
}
```

**Important:** Describe each test with a short comment.

## Step 3: Create EventLoggingServiceTest
- File: `src/test/java/com/driver_monitoring/service/EventLoggingServiceTest.java`

- Write tests to:
  - Log a Drowsy event and verify it is stored correctly.
  - Log a Distracted event and verify it is stored correctly.
  - Ensure Normal states are **not** logged.

- Example skeleton:
```java
// What is this file?
// Unit tests for EventLoggingService.
// Why is this needed?
// To verify correct logging behavior of driver events into database.

package com.driver_monitoring.service;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class EventLoggingServiceTest {

    @Autowired
    private EventLoggingService eventLoggingService;

    @Test
    void testLogDrowsyEvent() {
        // Simulate logging Drowsy event
    }

    @Test
    void testLogDistractedEvent() {
        // Simulate logging Distracted event
    }

    @Test
    void testDoNotLogNormalEvent() {
        // Verify that Normal state does not create a log entry
    }
}
```

---

# Important Details
- Use only **simple assertions** (e.g., checking object is not null, checking list size).
- No mocking frameworks are required for this prototype stage.
- Use `@SpringBootTest` to allow testing with the real context.

---

# Coding Standards
You must follow all rules defined in `CODING_STANDARDS.txt`:
- Clear naming of tests.
- One logical assertion per test if possible.
- Proper comments describing each test case.

---

# Success Criteria
- Tests compile and pass successfully.
- Tests cover the most important success and failure scenarios.
- Code is simple, clean, and properly commented.

---

# References
- [JUnit 5 Basics](https://junit.org/junit5/docs/current/user-guide/)
- [Spring Boot Testing Guide](https://spring.io/guides/gs/testing-web/)
- Knowledge about event structure ➔ `Knowledge/event_logging_knowledge.txt`

---

# End of TASK_08_Unit_Tests.txt

